Definition: 
	- A Class is a user-defined blueprint or prototype from which objects are created
	- Classes provide a means of bundling data and functionality together
	- Creating a new class also creates a new type of object, allowing new instances of that type to be made
	- Each class instance can have attributes attached to it for maintaining its state
	- Class instances can also have methods (defined by their class) for modifying their state


Problem:
	- You want to track the number of dogs who have different attributes like breed and age
		○ If a list is used, the first element could be the dog's breed while the second element could represent its age.
		○ This becomes an issue with large amount of dogs. You wouldn't have a way to correlate which attribute begins to which dog
	- Classes create a user-defined data structure, which holds its own data members and member functions, which can be accessed and used by creating an instance of that class. 

Defining a class:
class Dog:
	pass
	
Class Objects:
	- An object is an instance of a class
	- A class is like a blueprint while an instance is a copy of the class with actual values
	- An object concists of:
		○ State: it is represented by the attributes of an object. It also reflects the properties of an object
		○ Behavior: it is represented by the methods of an object. It also reflects the response of an object to other objects
		○ Identity: it gives a unique name to an object and enables one object to interact with other objects


Declaring objects (aka Instantiating a class):
	- When an object of a class is created, the class is said to be instantiated.
	- All the instances share the attributes and the behavior of the class, but the values of those attributes
	- A single class may have any number of instances

Declaring an object:
class Dog:
     
    # A simple class
    # attribute
    attr1 = "mammal"
    attr2 = "dog"
 
    # A sample method 
    def fun(self):
        print("I'm a", self.attr1)
        print("I'm a", self.attr2)
 
# Driver code
# Object instantiation
Rodger = Dog()
 
# Accessing class attributes
# and method through objects
print(Rodger.attr1)
Rodger.fun()

----------------

Output
mammal
I'm a mammal
I'm a dog

From <https://www.geeksforgeeks.org/python-classes-and-objects/> 


The Self:
	- Class methods must have an extra first parameter in the method definition. We do not give a value for this perameter when we call the method, python provides it
	- If we have a method that takes no arguments, then we still have to have one argument
	- When we call a method of this object as myobject.method(arg1, arg2), this is automatically converted by python int MyClass.method(myobject, arg1, arg2) 

__init__ method:
	- Similar to constructors in C++ and Java. Constructors are used to initialize the object's state
	- Like methods, a constructor also contains a collection of statements (i.e. instructions) that are executed at the time of object creation
	- It runs as soon as an object of a class is instantiated
	- The method is useful to do any initialiation you want to do with your object

# A Sample class with init method
class Person:
   
    # init method or constructor 
    def __init__(self, name):
        self.name = name
   
    # Sample Method 
    def say_hi(self):
        print('Hello, my name is', self.name)
   
p = Person('Nikhil')
p.say_hi()


Output
Hello, my name is Nikhil


Class and Instance Variables:
	- Instance variables are for data, unuqie to each instance & are assigned inside a constructor or method with self
	- Class variables are for attributes and methods shared by all instances of the class & are variables who value is assigned in the class

	Defining variables using a constructor:
	
	# Python3 program to show that the variables with a value 
	# assigned in the class declaration, are class variables and
	# variables inside methods and constructors are instance
	# variables.
	    
	# Class for Dog
	class Dog:
	   
	    # Class Variable
	    animal = 'dog'            
	   
	    # The init method or constructor
	    def __init__(self, breed, color):
	     
	        # Instance Variable    
	        self.breed = breed
	        self.color = color       
	    
	# Objects of Dog class
	Rodger = Dog("Pug", "brown")
	Buzo = Dog("Bulldog", "black")
	 
	print('Rodger details:')  
	print('Rodger is a', Rodger.animal)
	print('Breed: ', Rodger.breed)
	print('Color: ', Rodger.color)
	 
	print('\nBuzo details:')  
	print('Buzo is a', Buzo.animal)
	print('Breed: ', Buzo.breed)
	print('Color: ', Buzo.color)
	 
	# Class variables can be accessed using class
	# name also
	print("\nAccessing class variable using class name")
	print(Dog.animal)
	
	Output:
	Rodger details:
Rodger is a dog
Breed:  Pug
Color:  brown
	Buzo details:
Buzo is a dog
Breed:  Bulldog
Color:  black
	Accessing class variable using class name
dog
	
	
	
	Defining a variable using the normal method:
	
	
	# Python3 program to show that we can create 
	# instance variables inside methods
	    
	# Class for Dog
	class Dog:
	       
	    # Class Variable
	    animal = 'dog'     
	       
	    # The init method or constructor
	    def __init__(self, breed):
	           
	        # Instance Variable
	        self.breed = breed            
	   
	    # Adds an instance variable 
	    def setColor(self, color):
	        self.color = color
	       
	    # Retrieves instance variable    
	    def getColor(self):    
	        return self.color   
	   
	# Driver Code
	Rodger = Dog("pug")
	Rodger.setColor("brown")
	print(Rodger.getColor()) 
	
	
	Output:
	brown


